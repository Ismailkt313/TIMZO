<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Timzo Admin - Category Management</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link rel="icon" type="image/x-icon" href="/images/TIMZO.jpg">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
    }

    .status-active {
      background-color: #dcfce7;
      color: #166534;
    }

    .status-blocked {
      background-color: #fee2e2;
      color: #dc2626;
    }

    .section-card {
      animation: fadeIn 0.3s ease-out forwards;
    }

    .table-container::-webkit-scrollbar {
      height: 8px;
    }

    .table-container::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }

    .error-message {
      color: #dc2626;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @media (max-width: 768px) {
      .section-card {
        padding: 1rem !important;
      }

      .table th, .table td {
        font-size: 0.875rem;
        padding: 0.5rem;
      }

      .search-form {
        width: 100% !important;
      }

      .form-section, .table-section {
        margin-bottom: 1rem;
      }

      .action-buttons {
        flex-direction: column;
        gap: 0.5rem;
      }

      .section-title {
        font-size: 1rem;
      }
    }

    @media (max-width: 576px) {
      .table th, .table td {
        font-size: 0.75rem;
        padding: 0.4rem;
      }

      .btn {
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
      }

      .status-badge {
        font-size: 0.6875rem;
      }

      .form-control, .form-select {
        font-size: 0.875rem;
      }
    }
  </style>
</head>
<body class="bg-gray-50">
  <!-- Sidebar -->
  <div class="fixed inset-y-0 left-0 z-40 transition-all duration-300 transform -translate-x-full lg:translate-x-0" id="sidebar">
    <div class="flex flex-col h-full w-72 bg-gradient-to-b from-slate-800 to-slate-900 text-white shadow-xl rounded-r-xl overflow-hidden">
      <div class="p-5 flex items-center gap-3 border-b border-slate-700/50">
        <img src="/images/TIMZO.jpg" alt="Timzo Logo" class="w-10 h-10 rounded-md">
        <div class="text-xl font-bold tracking-wide bg-gradient-to-r from-amber-300 to-amber-500 bg-clip-text text-transparent">
          Timzo Admin
        </div>
      </div>
      <div class="px-4 py-5">
        <div class="flex items-center gap-3 mb-2 px-2">
          <div class="w-10 h-10 rounded-full bg-amber-500 flex items-center justify-center text-slate-900 font-bold">
            <%= admin && admin.name ? admin.name.charAt(0).toUpperCase() : 'A' %>
          </div>
          <div>
            <div class="font-medium">
              <%= admin && admin.name ? admin.name : 'Admin User' %>
            </div>
            <div class="text-xs text-slate-400">
              <%= admin && admin.email ? admin.email : 'admin@timzo.com' %>
            </div>
          </div>
        </div>
      </div>
      <nav class="flex-1 px-4 space-y-1 overflow-y-auto scrollbar-thin scrollbar-thumb-slate-700 scrollbar-track-transparent">
        <div class="text-xs font-semibold text-slate-400 uppercase tracking-wider px-3 mb-2">Dashboard</div>
        <a href="/admin/dashboard" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          <span>Dashboard</span>
        </a>
        <div class="text-xs font-semibold text-slate-400 uppercase tracking-wider px-3 mt-6 mb-2">Store Management</div>
        <a href="/admin/getProduct" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span>Products</span>
        </a>
        <a href="/admin/brand" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
          <span>Brands</span>
        </a>
        <a href="/admin/categories" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group bg-amber-500/10 text-amber-400">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          <span>Categories</span>
        </a>
        <a href="/admin/orders" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
          </svg>
          <span>Orders</span>
        </a>
        <a href="/admin/coupons" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
          </svg>
          <span>Coupons</span>
        </a>
        <a href="/admin/sales-report" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span>Sales Report</span>
        </a>
        <div class="text-xs font-semibold text-slate-400 uppercase tracking-wider px-3 mt-6 mb-2">User Management</div>
        <a href="/admin/users" class="flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group text-slate-300 hover:bg-slate-700/50 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-slate-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
          <span>Users</span>
        </a>
        <div class="py-10"></div>
      </nav>
      <div class="p-4 mt-auto border-t border-slate-700/50">
        <a href="/admin/logout" class="flex items-center px-3 py-2.5 rounded-lg text-red-400 hover:bg-red-500/10 hover:text-red-300 transition-all duration-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
          </svg>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </div>

  <!-- Sidebar Backdrop for Mobile -->
  <div class="fixed inset-0 bg-black/50 z-30 lg:hidden transition-opacity duration-300 opacity-0 pointer-events-none" id="sidebarBackdrop"></div>

  <!-- Mobile Sidebar Toggle -->
  <div class="fixed top-4 left-4 z-50 lg:hidden">
    <button id="sidebarToggle" class="bg-amber-500 text-slate-900 rounded-lg p-2 shadow-lg flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" id="menuIcon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" id="closeIcon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>

  <!-- Main Content -->
  <main class="lg:ml-72 min-h-screen p-4 lg:p-6 pt-16 lg:pt-6">
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden section-card">
      <!-- Header -->
      <div class="p-4 lg:p-6 border-b border-gray-200">
        <h1 class="text-2xl lg:text-3xl font-bold text-gray-900">Category Management</h1>
        <p class="text-gray-500 mt-1">Add, edit, and manage product categories</p>
      </div>
      <!-- Content -->
      <div class="p-4 lg:p-6">
        <!-- Search Bar -->
        <div class="mb-6 section-card">
          <form action="/admin/category/" method="get" class="input-group search-form" style="max-width: 500px; margin: 0 auto;">
            <input type="text" class="form-control rounded-start" placeholder="Search categories" name="search" value="<%= search || '' %>">
            <button class="btn btn-primary rounded-end" type="submit">
              <i class="bi bi-search me-1"></i> Search
            </button>
          </form>
        </div>

        <!-- Form and Table -->
        <div class="row g-4">
          <!-- Add Category Form -->
          <div class="col-md-4 form-section">
            <div class="card h-100 section-card">
              <div class="card-body">
                <h2 class="text-lg font-semibold text-gray-700 mb-4 section-title">Add Category</h2>
                <form id="addCategoryForm" method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                  <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" name="name" placeholder="Type here" class="form-control" id="name">
                    <div id="name-error" class="error-message"></div>
                  </div>
                  <div class="mb-3">
                    <label for="descriptionId" class="form-label">Description</label>
                    <textarea name="description" placeholder="Type here" class="form-control" id="descriptionId" rows="4"></textarea>
                    <div id="description-error" class="error-message"></div>
                  </div>
                  <button class="btn btn-primary w-100" type="submit">
                    <i class="bi bi-plus-circle me-1"></i> Create Category
                  </button>
                </form>
              </div>
            </div>
          </div>

          <!-- Category List Table -->
          <div class="col-md-8 table-section">
            <div class="card section-card">
              <div class="card-body">
                <h2 class="text-lg font-semibold text-gray-700 mb-4 section-title">Category List</h2>
                <div class="table-container" style="overflow-x: auto;">
                  <table class="table table-hover mb-0">
                    <thead class="table-dark">
                      <tr>
                        <th class="p-3 text-left">Name</th>
                        <th class="p-3 text-left">Description</th>
                        <th class="p-3 text-left">Offer</th>
                        <th class="p-3 text-left">Status</th>
                        <th class="p-3 text-left">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% if (categories && categories.length > 0) { %>
                        <% categories.reverse().forEach(category => { %>
                          <tr class="hover:bg-gray-50">
                            <td class="p-3"><%= category.name || 'N/A' %></td>
                            <td class="p-3"><%= category.description || '-' %></td>
                            <td class="p-3">
                              <%= category.offer && category.offer.percentage ? `${category.offer.percentage}%` : 'None' %>
                            </td>
                            <td class="p-3">
                              <span class="status-badge status-<%= category.isListed ? 'active' : 'blocked' %>">
                                <%= category.isListed ? 'Listed' : 'Unlisted' %>
                              </span>
                            </td>
                            <td class="p-3">
                              <div class="d-flex gap-2 action-buttons">
                                <button class="btn btn-sm btn-outline-primary" onclick="openEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">
                                  <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-<%= category.isListed ? 'danger' : 'success' %> toggle-status-btn"
                                        data-category-id="<%= category._id %>"
                                        data-status="<%= category.isListed ? 'unlist' : 'list' %>">
                                  <i class="bi bi-<%= category.isListed ? 'x-circle' : 'check-circle' %>"></i>
                                </button>
                                <% if (category.offer && category.offer.percentage) { %>
                                  <button class="btn btn-sm btn-outline-danger" onclick="removeOffer('<%= category._id %>')">
                                    <i class="bi bi-trash"></i>
                                  </button>
                                <% } else { %>
                                  <button class="btn btn-sm btn-outline-success" onclick="addOffer('<%= category._id %>')">
                                    <i class="bi bi-percent"></i>
                                  </button>
                                <% } %>
                              </div>
                            </td>
                          </tr>
                        <% }); %>
                      <% } else { %>
                        <tr>
                          <td colspan="5" class="p-3 text-center text-muted">
                            <i class="bi bi-folder-x display-6 d-block mb-2 opacity-25"></i>
                            No categories found
                          </td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
                <!-- Pagination -->
                <% if (totalPages > 1) { %>
                  <div class="pagination-container mt-4 d-flex justify-content-center">
                    <% if (currentPage > 1) { %>
                      <a href="?page=<%= currentPage - 1 %><%= search ? '&search=' + search : '' %>" class="btn btn-outline-primary btn-sm mx-1">« Previous</a>
                    <% } %>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                      <% if (i === currentPage) { %>
                        <span class="btn btn-primary btn-sm mx-1"><%= i %></span>
                      <% } else { %>
                        <a href="?page=<%= i %><%= search ? '&search=' + search : '' %>" class="btn btn-outline-primary btn-sm mx-1"><%= i %></a>
                      <% } %>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                      <a href="?page=<%= currentPage + 1 %><%= search ? '&search=' + search : '' %>" class="btn btn-outline-primary btn-sm mx-1">Next »</a>
                    <% } %>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Edit Category Modal -->
  <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editCategoryForm" method="post" action="/admin/editCategory">
            <input type="hidden" name="categoryId" id="editCategoryId">
            <div class="mb-3">
              <label for="editName" class="form-label">Name</label>
              <input type="text" name="name" class="form-control" id="editName">
              <div id="edit-name-error" class="error-message"></div>
            </div>
            <div class="mb-3">
              <label for="editDescription" class="form-label">Description</label>
              <textarea name="description" class="form-control" id="editDescription" rows="4"></textarea>
              <div id="edit-description-error" class="error-message"></div>
            </div>
            <button type="submit" class="btn btn-primary w-100">
              <i class="bi bi-save me-1"></i> Save Changes
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-100 p-4 text-center text-gray-600 text-sm shadow-inner">
    © <%= new Date().getFullYear() %> Timzo Admin Panel. All rights reserved.
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>
    // Sidebar Toggle
    const sidebar = document.getElementById('sidebar');
    const sidebarBackdrop = document.getElementById('sidebarBackdrop');
    const sidebarToggle = document.getElementById('sidebarToggle');
    const menuIcon = document.getElementById('menuIcon');
    const closeIcon = document.getElementById('closeIcon');

    function toggleSidebar() {
      sidebar.classList.toggle('translate-x-0');
      sidebarBackdrop.classList.toggle('opacity-0');
      sidebarBackdrop.classList.toggle('pointer-events-none');
      menuIcon.classList.toggle('hidden');
      closeIcon.classList.toggle('hidden');
    }

    sidebarToggle.addEventListener('click', toggleSidebar);
    sidebarBackdrop.addEventListener('click', toggleSidebar);

    // Close Sidebar on Resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024) {
        sidebar.classList.remove('translate-x-0');
        sidebarBackdrop.classList.add('opacity-0', 'pointer-events-none');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      }
    });

    // Form Validation and Submission
    function validateForm(formId, nameId, descriptionId, nameErrorId, descriptionErrorId) {
      clearErrorMessages(formId);
      const name = document.getElementById(nameId).value.trim();
      const description = document.getElementById(descriptionId).value.trim();
      let isValid = true;

      if (!name) {
        displayErrorMessage(nameErrorId, 'Category name is required.');
        isValid = false;
      } else if (!/^[A-Za-z\s]+$/.test(name)) {
        displayErrorMessage(nameErrorId, 'Category name should contain only letters.');
        isValid = false;
      }

      if (description.length < 5) {
        displayErrorMessage(descriptionErrorId, 'Description must be at least 5 characters.');
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = 'block';
      }
    }

    function clearErrorMessages(formId) {
      const form = document.getElementById(formId);
      const errors = form.querySelectorAll('.error-message');
      errors.forEach(error => {
        error.innerText = '';
        error.style.display = 'none';
      });
    }

    // Add Category Submission
    function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm('addCategoryForm', 'name', 'descriptionId', 'name-error', 'description-error')) return;

      const form = event.target;
      const name = form.querySelector('#name').value.trim();
      const description = form.querySelector('#descriptionId').value.trim();

      Swal.fire({
        title: 'Add Category',
        text: `Are you sure you want to add the category "${name}"?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, Add',
        confirmButtonColor: '#0288d1',
        cancelButtonColor: '#6c757d'
      }).then(result => {
        if (result.isConfirmed) {
          fetch('/admin/addCategory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, description })
          })
            .then(response => response.json())
            .then(data => {
              if (data.message) {
                Swal.fire({
                  title: 'Success',
                  text: data.message || 'Category added successfully',
                  icon: 'success',
                  confirmButtonColor: '#0288d1'
                }).then(() => {
                  location.reload();
                });
              } else {
                Swal.fire({
                  title: 'Error',
                  text: data.error || 'An error occurred while adding the category',
                  icon: 'error',
                  confirmButtonColor: '#0288d1'
                });
              }
            })
            .catch(err => {
              Swal.fire({
                title: 'Error',
                text: err.message || 'An error occurred while adding the category',
                icon: 'error',
                confirmButtonColor: '#0288d1'
              });
            });
        }
      });
    }

    // Edit Category Modal
    function openEditModal(categoryId, name, description) {
      document.getElementById('editCategoryId').value = categoryId;
      document.getElementById('editName').value = name;
      document.getElementById('editDescription').value = description || '';
      const modal = new bootstrap.Modal(document.getElementById('editCategoryModal'));
      modal.show();
    }

    // Edit Category Submission
    document.getElementById('editCategoryForm').addEventListener('submit', function(event) {
      event.preventDefault();
      if (!validateForm('editCategoryForm', 'editName', 'editDescription', 'edit-name-error', 'edit-description-error')) return;

      const form = event.target;
      const categoryId = form.querySelector('#editCategoryId').value;
      const name = form.querySelector('#editName').value.trim();
      const description = form.querySelector('#editDescription').value.trim();

      Swal.fire({
        title: 'Update Category',
        text: `Are you sure you want to update the category "${name}"?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, Update',
        confirmButtonColor: '#0288d1',
        cancelButtonColor: '#6c757d'
      }).then(result => {
        if (result.isConfirmed) {
          fetch('/admin/editCategory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ categoryId, name, description })
          })
            .then(response => response.json())
            .then(data => {
              if (data.message) {
                Swal.fire({
                  title: 'Success',
                  text: data.message || 'Category updated successfully',
                  icon: 'success',
                  confirmButtonColor: '#0288d1'
                }).then(() => {
                  location.reload();
                });
              } else {
                Swal.fire({
                  title: 'Error',
                  text: data.error || 'An error occurred while updating the category',
                  icon: 'error',
                  confirmButtonColor: '#0288d1'
                });
              }
            })
            .catch(err => {
              Swal.fire({
                title: 'Error',
                text: err.message || 'An error occurred while updating the category',
                icon: 'error',
                confirmButtonColor: '#0288d1'
              });
            });
        }
      });
    });

    // Toggle Category Status
    document.querySelectorAll('.toggle-status-btn').forEach(button => {
      button.addEventListener('click', function() {
        const categoryId = this.dataset.categoryId;
        const currentStatus = this.dataset.status;

        Swal.fire({
          title: `Are you sure?`,
          text: `This will ${currentStatus === 'list' ? 'list' : 'unlist'} the category.`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: `Yes, ${currentStatus === 'list' ? 'List' : 'Unlist'}`,
          confirmButtonColor: '#0288d1',
          cancelButtonColor: '#6c757d'
        }).then(result => {
          if (result.isConfirmed) {
            fetch(`/admin/toggleCategory/${categoryId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  Swal.fire({
                    title: 'Success',
                    text: `Category has been ${data.isListed ? 'listed' : 'unlisted'}.`,
                    icon: 'success',
                    confirmButtonColor: '#0288d1'
                  }).then(() => {
                    location.reload();
                  });
                } else {
                  Swal.fire({
                    title: 'Failed',
                    text: data.message || 'Operation unsuccessful.',
                    icon: 'error',
                    confirmButtonColor: '#0288d1'
                  });
                }
              })
              .catch(err => {
                Swal.fire({
                  title: 'Error',
                  text: err.message || 'An error occurred while toggling status',
                  icon: 'error',
                  confirmButtonColor: '#0288d1'
                });
              });
          }
        });
      });
    });

    // Add Category Offer
    async function addOffer(categoryId) {
      const { value: percentage } = await Swal.fire({
        title: 'Add Offer',
        input: 'number',
        inputLabel: 'Offer Percentage',
        inputPlaceholder: 'Enter percentage (e.g., 10)',
        inputAttributes: { min: 1, max: 100 },
        showCancelButton: true,
        confirmButtonText: 'Add Offer',
        confirmButtonColor: '#0288d1',
        cancelButtonColor: '#6c757d'
      });

      if (percentage) {
        try {
          const response = await fetch('/admin/addCategoryOffer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ percentage: parseInt(percentage), categoryId })
          });
          const data = await response.json();
          if (response.ok && data.status) {
            Swal.fire({
              title: 'Success',
              text: 'Offer has been added.',
              icon: 'success',
              confirmButtonColor: '#0288d1'
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Failed',
              text: data.message || 'Adding offer failed.',
              icon: 'error',
              confirmButtonColor: '#0288d1'
            });
          }
        } catch (error) {
          Swal.fire({
            title: 'Error',
            text: 'An error occurred while adding the offer.',
            icon: 'error',
            confirmButtonColor: '#0288d1'
          });
          console.error('Error adding offer:', error);
        }
      }
    }

    // Remove Category Offer
    async function removeOffer(categoryId) {
      const result = await Swal.fire({
        title: 'Remove Offer',
        text: 'Are you sure you want to remove the offer from this category?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Remove',
        confirmButtonColor: '#0288d1',
        cancelButtonColor: '#6c757d'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/admin/removeCategoryOffer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ categoryId })
          });
          const data = await response.json();
          if (response.ok && data.status) {
            Swal.fire({
              title: 'Success',
              text: 'Offer has been removed.',
              icon: 'success',
              confirmButtonColor: '#0288d1'
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Failed',
              text: data.message || 'Removing offer failed.',
              icon: 'error',
              confirmButtonColor: '#0288d1'
            });
          }
        } catch (error) {
          Swal.fire({
            title: 'Error',
            text: 'An error occurred while removing the offer.',
            icon: 'error',
            confirmButtonColor: '#0288d1'
          });
          console.error('Error removing offer:', error);
        }
      }
    }
  </script>
</body>
</html>