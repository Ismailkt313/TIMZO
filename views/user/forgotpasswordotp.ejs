<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="Verify your OTP to reset your Timzo password" />
  <title>Verify OTP - Timzo</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      background: linear-gradient(to right, #2a9df4, #e0f7fa);
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      font-family: 'Arial', sans-serif;
    }

    .otp-container {
      background: white;
      padding: 30px 40px;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      text-align: center;
      animation: fadeIn 0.8s ease;
      width: 100%;
      max-width: 400px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    h2 {
      margin-bottom: 20px;
      color: #333;
      font-size: 24px;
    }

    .form-group {
      margin-bottom: 15px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      font-weight: 600;
      color: #333;
      text-align: left;
    }

    input[type="text"] {
      width: 100%;
      padding: 12px;
      box-sizing: border-box;
      font-size: 16px;
      border: 2px solid #ddd;
      border-radius: 6px;
      outline: none;
      transition: border-color 0.3s;
    }

    input[type="text"]:focus {
      border-color: #2a9df4;
    }

    input[type="text"]:invalid {
      border-color: #d32f2f;
    }

    button {
      padding: 12px 20px;
      background-color: #2a9df4;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      width: 100%;
      transition: background-color 0.3s;
    }

    button:disabled {
      background-color: #a0a0a0;
      cursor: not-allowed;
    }

    button:hover:not(:disabled) {
      background-color: #1a73e8;
    }

    .timer {
      margin: 15px 0;
      font-weight: bold;
      color: #e91e63;
      font-size: 16px;
    }

    .error {
      color: #d32f2f;
      margin-bottom: 15px;
      font-size: 14px;
      background-color: #ffe6e6;
      padding: 10px;
      border-radius: 6px;
    }

    .toast {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%) translateY(100px);
      background-color: #4caf50;
      color: white;
      padding: 12px 24px;
      border-radius: 6px;
      font-size: 14px;
      opacity: 0;
      transition: transform 0.5s, opacity 0.5s;
      z-index: 1000;
    }

    .toast.show {
      transform: translateX(-50%) translateY(0);
      opacity: 1;
    }

    .loading::after {
      content: 'Loading...';
      animation: blink 1s infinite;
    }

    @keyframes blink {
      50% { opacity: 0.5; }
    }

    p {
      margin-top: 15px;
    }

    a {
      color: #2a9df4;
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }

    .form-text {
      color: #666;
      font-size: 12px;
      margin-top: 5px;
      display: block;
      text-align: left;
    }
  </style>
</head>
<body>
  <div class="otp-container" role="main">
    <h2>Verify OTP</h2>

    <% if (typeof error !== 'undefined' && error) { %>
      <div class="error" role="alert"><%= error %></div>
    <% } %>

    <div id="client-error" class="error" style="display: none;" role="alert"></div>

    <form id="otp-form" action="/user/forgotpasswordotp" method="POST">
      <div class="form-group">
        <label for="otp">Enter OTP</label>
        <input
          type="text"
          id="otp"
          name="otp"
          placeholder="Enter 6-digit OTP"
          
          pattern="[0-9]{6}"
          maxlength="6"
          aria-describedby="otp-help"
        />
        <small id="otp-help" class="form-text">Enter the 6-digit OTP sent to your email.</small>
      </div>
      <button type="submit" id="verify-btn">Verify OTP</button>
    </form>

    <div class="timer" id="timer" aria-live="polite">00:30</div>
    <button id="resend-btn" disabled>Resend OTP</button>

    <p><a href="/user/forgotpassword">Back to Forgot Password</a></p>
  </div>

  <div id="toast" class="toast" role="alert">OTP Resent Successfully!</div>

  <script>
    let timer = 30;
    let countdown;
    const timerDisplay = document.getElementById("timer");
    const resendBtn = document.getElementById("resend-btn");
    const clientErrorDisplay = document.getElementById("client-error");
    const otpForm = document.getElementById("otp-form");
    const verifyBtn = document.getElementById("verify-btn");
    const toast = document.getElementById("toast");

    function startTimer() {
      clearInterval(countdown);
      timerDisplay.textContent = `00:${timer.toString().padStart(2, "0")}`;
      resendBtn.disabled = true;

      countdown = setInterval(() => {
        timer--;
        if (timer <= 0) {
          clearInterval(countdown);
          timerDisplay.textContent = "OTP expired";
          resendBtn.disabled = false;
          return;
        }
        timerDisplay.textContent = `00:${timer.toString().padStart(2, "0")}`;
      }, 1000);
    }

    function showToast(message) {
      toast.textContent = message;
      toast.classList.add("show");
      setTimeout(() => {
        toast.classList.remove("show");
      }, 3000);
    }

    function setLoading(button, isLoading) {
      if (isLoading) {
        button.disabled = true;
        button.classList.add("loading");
        button.textContent = "Loading...";
      } else {
        button.disabled = false;
        button.classList.remove("loading");
        button.textContent = button.id === "verify-btn" ? "Verify OTP" : "Resend OTP";
      }
    }

    startTimer();

    otpForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const otp = document.getElementById("otp").value.trim();

      if (!/^\d{6}$/.test(otp)) {
        clientErrorDisplay.textContent = "Please enter a valid 6-digit OTP.";
        clientErrorDisplay.style.display = "block";
        return;
      }

      clientErrorDisplay.style.display = "none";
      clientErrorDisplay.textContent = "";
      setLoading(verifyBtn, true);

      fetch("/user/forgotpasswordotp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ otp }),
        credentials: "include"
      })
      .then(res => {
        const contentType = res.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Expected JSON response");
        }
        return res.json();
      })
      .then(response => {
        setLoading(verifyBtn, false);
        if (response.success) {
          Swal.fire({
            icon: "success",
            title: "OTP Verified!",
            timer: 1500,
            showConfirmButton: false
          }).then(() => {
            window.location.href = response.redirect || "/user/changepassword";
          });
        } else {
          clientErrorDisplay.textContent = response.error || "Invalid OTP.";
          clientErrorDisplay.style.display = "block";
          if (response.error && response.error.includes("Session expired")) {
            Swal.fire({
              icon: "error",
              title: "Session Expired",
              text: "Please start the forgot password process again.",
              timer: 2000,
              showConfirmButton: false
            }).then(() => {
              window.location.href = "/user/forgotpassword";
            });
          }
        }
      })
      .catch(error => {
        setLoading(verifyBtn, false);
        console.error("Fetch error:", error);
        clientErrorDisplay.textContent = "An error occurred. Please try again.";
        clientErrorDisplay.style.display = "block";
      });
    });

    resendBtn.addEventListener("click", () => {
      setLoading(resendBtn, true);

      fetch("/user/resend-forgot-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include"
      })
      .then(res => {
        const contentType = res.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Expected JSON response");
        }
        return res.json();
      })
      .then(response => {
        setLoading(resendBtn, false);
        if (response.success) {
          timer = 30;
          startTimer();
          showToast("OTP Resent Successfully!");
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: response.error || "Failed to resend OTP."
          });
          if (response.error && response.error.includes("Session expired")) {
            Swal.fire({
              icon: "error",
              title: "Session Expired",
              text: "Please start the forgot password process again.",
              timer: 2000,
              showConfirmButton: false
            }).then(() => {
              window.location.href = "/user/forgotpassword";
            });
          }
        }
      })
      .catch(error => {
        setLoading(resendBtn, false);
        console.error("Fetch error:", error);
        Swal.fire({
          icon: "error",
          title: "Network Error",
          text: "Please try again later."
        });
      });
    });
  </script>
</body>
</html>