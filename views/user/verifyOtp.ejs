<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Verify OTP</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      background: linear-gradient(to right, #2a9df4, #e0f7fa);
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      font-family: 'Arial', sans-serif;
    }

    .otp-container {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.15);
      text-align: center;
      animation: fadeIn 0.8s ease;
      width: 300px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    h2 {
      margin-bottom: 15px;
      color: #222;
      font-size: 24px;
    }

    input[type="text"] {
      padding: 12px;
      width: 100%;
      box-sizing: border-box;
      font-size: 16px;
      border: 2px solid #ddd;
      border-radius: 6px;
      margin-bottom: 15px;
      outline: none;
      transition: border-color 0.3s;
    }

    input[type="text"]:focus {
      border-color: #2a9df4;
    }

    button {
      padding: 12px 20px;
      background-color: #2a9df4;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      width: 100%;
      transition: background-color 0.3s;
    }

    button:disabled {
      background-color: #a0a0a0;
      cursor: not-allowed;
    }

    button:hover:not(:disabled) {
      background-color: #1a73e8;
    }

    .timer {
      margin: 15px 0;
      font-weight: bold;
      color: #e91e63;
      font-size: 16px;
    }

    .error {
      color: #d32f2f;
      margin-bottom: 15px;
      font-size: 14px;
    }

    .toast {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%) translateY(100px);
      background-color: #4caf50;
      color: white;
      padding: 10px 20px;
      border-radius: 6px;
      font-size: 14px;
      opacity: 0;
      transition: transform 0.5s, opacity 0.5s;
    }

    .toast.show {
      transform: translateX(-50%) translateY(0);
      opacity: 1;
    }
  </style>
</head>
<body>
  <div class="otp-container">
    <h2>Verify OTP</h2>

    <!-- Display server-side error if passed from backend -->
    <% if (typeof error !== 'undefined' && error) { %>
      <div class="error"><%= error %></div>
    <% } %>

    <!-- Client-side error display area -->
    <div id="client-error" class="error" style="display: none;"></div>

    <form id="otp-form" action="/user/verify-otp" method="POST">
      <input type="text" id="otp" name="otp" placeholder="Enter OTP" />
      <button type="submit">Verify OTP</button>
    </form>

    <div class="timer" id="timer">00:30</div>
    <button id="resend-btn" disabled>Resend OTP</button>
  </div>

  <div id="toast" class="toast">OTP Resent Successfully!</div>

  <script>
    let timer = 30;
    let countdown;
    const timerDisplay = document.getElementById("timer");
    const resendBtn = document.getElementById("resend-btn");
    const clientErrorDisplay = document.getElementById("client-error");
    const otpForm = document.getElementById("otp-form");
    const toast = document.getElementById("toast");

    function startTimer() {
      clearInterval(countdown);
      timerDisplay.textContent = `00:${timer.toString().padStart(2, '0')}`;
      resendBtn.disabled = true;

      countdown = setInterval(() => {
        timer--;
        if (timer <= 0) {
          clearInterval(countdown);
          timerDisplay.textContent = "OTP expired";
          resendBtn.disabled = false;
          return;
        }
        timerDisplay.textContent = `00:${timer.toString().padStart(2, '0')}`;
      }, 1000);
    }

    function showToast(message) {
      toast.textContent = message;
      toast.classList.add("show");
      setTimeout(() => {
        toast.classList.remove("show");
      }, 3000);
    }

    startTimer();

    otpForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const otp = document.getElementById("otp").value;

      clientErrorDisplay.style.display = "none";
      clientErrorDisplay.textContent = "";

      fetch("/user/verify-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ otp })
      })
      .then(res => {
        const contentType = res.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Expected JSON response");
        }
        return res.json();
      })
      .then(response => {
        if (response.success) {
          Swal.fire({
            icon: "success",
            title: "OTP Verified!",
            timer: 1500,
            showConfirmButton: false
          }).then(() => {
            window.location.href = response.redirect || "/user/";
          });
        } else {
          clientErrorDisplay.textContent = response.error || "Invalid OTP.";
          clientErrorDisplay.style.display = "block";
        }
      })
      .catch(error => {
        console.error("Fetch error:", error);
        clientErrorDisplay.textContent = "An error occurred. Please try again.";
        clientErrorDisplay.style.display = "block";
      });
    });

    resendBtn.addEventListener("click", () => {
      Swal.fire({
        title: "Sending OTP...",
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      fetch("/user/resend-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" }
      })
      .then(res => res.json())
      .then(response => {
        Swal.close();
        if (response.success) {
          timer = 30;
          startTimer();
          showToast("OTP Resent Successfully!");
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: response.error || "Failed to resend OTP."
          });
        }
      })
      .catch(() => {
        Swal.close();
        Swal.fire({
          icon: "error",
          title: "Network Error",
          text: "Please try again later."
        });
      });
    });
  </script>
</body>
</html>