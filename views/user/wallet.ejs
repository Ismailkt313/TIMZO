<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Wallet - Timzo</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Poppins:wght@600&display=swap" rel="stylesheet">
  <link rel="icon" type="image/x-icon" href="/images/TIMZO.jpg">
  <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f4f4f9;
    }
    h1, h2, h3 {
      font-family: 'Poppins', sans-serif;
    }
    .sidebar {
      background: linear-gradient(180deg, #1f2937 0%, #111827 100%);
      width: 250px;
      transition: transform 0.3s ease-in-out;
      z-index: 1000;
      transform: translateX(-100%);
    }
    .sidebar-active {
      transform: translateX(0);
    }
    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 999;
    }
    .overlay-active {
      display: block;
    }
    .main-content {
      transition: margin-left 0.3s ease-in-out;
      padding: 1.5rem;
    }
    .wallet-card {
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
      transition: transform 0.2s ease-in-out;
    }
    .wallet-card:hover {
      transform: translateY(-2px);
    }
    .btn-primary {
      background-color: #1f2937;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      transition: all 0.3s;
      font-weight: 500;
    }
    .btn-primary:hover:not(:disabled) {
      background-color: #facc15;
      color: #1f2937;
    }
    .balance-section {
      background: linear-gradient(45deg, #facc15, #ffd700);
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
      margin-bottom: 1.5rem;
      color: #1f2937;
    }
    .balance {
      font-size: 2rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    .balance-change {
      font-size: 0.875rem;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      display: inline-flex;
      align-items: center;
    }
    .balance-change.credit {
      background-color: #d1fae5;
      color: #059669;
    }
    .balance-change.debit {
      background-color: #fee2e2;
      color: #dc2626;
    }
    .transaction-table {
      width: 100%;
      border-collapse: collapse;
    }
    .transaction-table th, .transaction-table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid #e5e7eb;
    }
    .transaction-table th {
      background-color: #f9fafb;
      color: #1f2937;
      font-weight: 500;
      cursor: pointer;
    }
    .transaction-table th:hover {
      background-color: #f3f4f6;
    }
    .transaction-table .credit {
      color: #10b981;
    }
    .transaction-table .debit {
      color: #ef4444;
    }
    .form-control {
      border: 1px solid #d1d5db;
      border-radius: 6px;
      padding: 0.5rem;
      width: 100%;
    }
    .form-control:focus {
      outline: none;
      border-color: #facc15;
      box-shadow: 0 0 0 3px rgba(250, 204, 21, 0.3);
    }
    .pagination {
      justify-content: center;
      margin-top: 1.5rem;
      display: flex;
      gap: 0.5rem;
    }
    .page-link {
      color: #1f2937;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      transition: all 0.3s;
      text-decoration: none;
    }
    .page-link:hover {
      background-color: #facc15;
      color: #1f2937;
    }
    .page-item.active .page-link {
      background-color: #1f2937;
      color: #fff;
    }
    .page-item.disabled .page-link {
      color: #6b7280;
      cursor: not-allowed;
    }
    .tooltip {
      position: relative;
    }
    .tooltip:hover::after {
      content: attr(data-tooltip);
      position: absolute;
      top: -2rem;
      left: 50%;
      transform: translateX(-50%);
      background: #374151;
      color: #fff;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      white-space: nowrap;
      z-index: 10;
    }
    .sidebar-toggle {
      z-index: 1001;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #1f2937;
      color: white;
      position: fixed;
      top: 1rem;
      left: 1rem;
    }
    @media (min-width: 769px) {
      .sidebar {
        transform: translateX(0);
      }
      .main-content {
        margin-left: 250px;
      }
      .sidebar-toggle, .overlay {
        display: none !important;
      }
    }
    @media (max-width: 768px) {
      .main-content {
        padding: 1rem;
      }
      .wallet-card {
        padding: 1.5rem;
      }
      .balance {
        font-size: 1.5rem;
      }
      .transaction-table th, .transaction-table td {
        font-size: 0.875rem;
        padding: 0.5rem;
      }
      .transaction-controls {
        flex-direction: column;
        gap: 0.75rem;
      }
      .btn-primary {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
      }
    }
    @media (max-width: 576px) {
      .main-content {
        padding: 0.75rem;
      }
      .wallet-card {
        padding: 1rem;
      }
      h1 {
        font-size: 1.5rem;
      }
      .balance {
        font-size: 1.25rem;
      }
      .transaction-table {
        font-size: 0.75rem;
      }
      .transaction-table th, .transaction-table td {
        padding: 0.5rem 0.25rem;
      }
      .form-control {
        font-size: 0.875rem;
      }
    }
  </style>
</head>
<body>
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <div id="sidebar" class="sidebar w-64 fixed top-0 left-0 h-full shadow-xl flex flex-col">
      <div class="p-6 text-xl font-semibold border-b border-gray-700 text-center text-white">
        <% if (user && user.fullname) { %>
          <%= user.fullname %>
        <% } else { %>
          Guest
        <% } %>
      </div>
      <div class="flex justify-center items-center py-5 border-b border-gray-700">
        <div class="w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center text-2xl font-bold uppercase text-white">
          <% if (user && user.fullname) { %>
            <%= user.fullname.charAt(0) %>
          <% } else { %>
            ?
          <% } %>
        </div>
      </div>
      <nav class="flex-1 px-4 py-6 space-y-3 text-sm font-medium text-white">
        <a href="/user/account" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'profile' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-user w-4"></i> My Profile
        </a>
        <a href="/user/address" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'address' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-map-marker-alt w-4"></i> My Address
        </a>
        <a href="/user/orders" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'orders' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-shopping-bag w-4"></i> My Orders
        </a>
        <a href="/user/wallet" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'wallet' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-wallet w-4"></i> My Wallet
        </a>
        <a href="/user/newPassword" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'changepassword' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-lock w-4"></i> Change Password
        </a>
        <a href="/user/sidewishlist" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'Wishlist' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-heart w-4"></i> Wishlist
        </a>
        <a href="/user/coupons" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'coupons' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-ticket-alt w-4"></i> My Coupon
        </a>
        <a href="/user/referral" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 <%= currentPage === 'referral' ? 'bg-gray-700 text-white' : 'text-gray-300 hover:bg-gray-800 hover:text-white' %>">
          <i class="fas fa-users w-4"></i> Refer & Earn
        </a>
        <a href="/user/" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 text-gray-300 hover:bg-gray-800 hover:text-white">
          <i class="fas fa-home w-4"></i> Home
        </a>
        <a href="/logout" class="flex items-center gap-3 px-4 py-2 rounded-md transition-all duration-200 text-red-400 hover:bg-red-500 hover:text-white">
          <i class="fas fa-sign-out-alt w-4"></i> Log Out
        </a>
      </nav>
    </div>

    <!-- Overlay for Mobile Sidebar -->
    <div class="overlay" id="sidebarOverlay"></div>

    <!-- Main Content -->
    <div class="main-content flex-1">
      <button class="sidebar-toggle md:hidden">
        <i class="fas fa-bars text-lg"></i>
      </button>
      <div class="max-w-5xl mx-auto">
        <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-8 text-center">My Wallet</h1>
        <div class="wallet-card" data-aos="fade-up">
          <div class="balance-section" data-aos="fade-up" data-aos-delay="100">
            <h2 class="text-lg font-semibold mb-2">Current Balance</h2>
            <div class="balance">
              ₹<%= wallet && wallet.balance !== undefined ? wallet.balance.toFixed(2) : '0.00' %>
              <button class="btn-primary btn-sm tooltip" onclick="copyBalance()" data-tooltip="Copy Balance">
                <i class="fas fa-copy"></i>
              </button>
              <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                <span class="balance-change <%= wallet.transactions[0].type %>">
                  <i class="fas fa-<%= wallet.transactions[0].type === 'credit' ? 'arrow-up' : 'arrow-down' %> mr-1"></i>
                  <%= wallet.transactions[0].type === 'credit' ? '+' : '-' %>₹<%= wallet.transactions[0].amount.toFixed(2) %>
                </span>
              <% } %>
            </div>
          </div>
          <div class="action-buttons flex flex-wrap gap-2 justify-center mb-6" data-aos="fade-up" data-aos-delay="200">
            <button class="btn-primary flex-1 text-sm tooltip" onclick="showAddFundsModal()" data-tooltip="Add Funds">
              <i class="fas fa-plus mr-1"></i> Add Funds
            </button>
            <button class="btn-primary flex-1 text-sm tooltip" onclick="showWithdrawFundsModal()" data-tooltip="Withdraw Funds">
              <i class="fas fa-minus mr-1"></i> Withdraw Funds
            </button>
            <button class="btn-primary flex-1 text-sm tooltip" onclick="downloadWalletHistory('csv')" data-tooltip="Download CSV">
              <i class="fas fa-download mr-1"></i> CSV
            </button>
            <button class="btn-primary flex-1 text-sm tooltip" onclick="downloadWalletHistory('pdf')" data-tooltip="Download PDF">
              <i class="fas fa-file-pdf mr-1"></i> PDF
            </button>
          </div>
          <div class="transaction-section" data-aos="fade-up" data-aos-delay="300">
            <h3 class="text-lg font-semibold mb-4">Transaction History</h3>
            <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
              <div class="transaction-controls flex flex-wrap gap-2 mb-4">
                <input type="text" id="searchInput" class="form-control flex-1" placeholder="Search transactions..." aria-label="Search transactions">
                <select id="filterType" class="form-control flex-1" aria-label="Filter transaction type">
                  <option value="all">All Types</option>
                  <option value="credit">Credit</option>
                  <option value="debit">Debit</option>
                </select>
                <select id="sortBy" class="form-control flex-1" aria-label="Sort transactions">
                  <option value="date-desc">Date (Newest)</option>
                  <option value="date-asc">Date (Oldest)</option>
                  <option value="amount-desc">Amount (High to Low)</option>
                  <option value="amount-asc">Amount (Low to High)</option>
                </select>
              </div>
              <table class="transaction-table" id="transactionTable">
                <thead>
                  <tr>
                    <th data-sort="date">Date</th>
                    <th data-sort="type">Type</th>
                    <th data-sort="amount">Amount</th>
                    <th>Description</th>
                  </tr>
                </thead>
                <tbody>
                  <% wallet.transactions.forEach(transaction => { %>
                    <tr data-type="<%= transaction.type %>" data-date="<%= transaction.date ? new Date(transaction.date).getTime() : 0 %>" data-amount="<%= transaction.amount %>">
                      <td><%= transaction.date ? new Date(transaction.date).toLocaleString('en-IN', { dateStyle: 'short', timeStyle: 'short' }) : 'N/A' %></td>
                      <td class="<%= transaction.type === 'credit' ? 'credit' : 'debit' %>">
                        <%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %>
                      </td>
                      <td class="<%= transaction.type === 'credit' ? 'credit' : 'debit' %>">₹<%= transaction.amount.toFixed(2) %></td>
                      <td><%= transaction.description %></td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
              <nav aria-label="Transaction pagination" class="pagination">
                <a class="page-link <%= currentPage === 1 ? 'disabled' : '' %>" href="/user/wallet?page=<%= currentPage - 1 %>&limit=<%= limit %>" aria-label="Previous">« Previous</a>
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <a class="page-link <%= currentPage === i ? 'active' : '' %>" href="/user/wallet?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                <% } %>
                <a class="page-link <%= currentPage === totalPages ? 'disabled' : '' %>" href="/user/wallet?page=<%= currentPage + 1 %>&limit=<%= limit %>" aria-label="Next">Next »</a>
              </nav>
            <% } else { %>
              <p class="text-gray-600 text-center">No transactions found.</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <footer class="bg-white p-4 text-center text-gray-600 text-sm mt-8 shadow-inner">
    © <%= new Date().getFullYear() %> Timzo. All rights reserved.
  </footer>

  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
  <script>
    AOS.init({ duration: 800, once: true });

    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      const overlay = document.getElementById('sidebarOverlay');
      sidebar.classList.toggle('sidebar-active');
      overlay.classList.toggle('overlay-active');
      document.body.style.overflow = sidebar.classList.contains('sidebar-active') ? 'hidden' : '';
    }

    document.addEventListener('DOMContentLoaded', () => {
      const sidebarToggle = document.querySelector('.sidebar-toggle');
      const overlay = document.getElementById('sidebarOverlay');
      if (sidebarToggle && overlay) {
        sidebarToggle.addEventListener('click', toggleSidebar);
        overlay.addEventListener('click', toggleSidebar);
      }
    });

    function copyBalance() {
      const balance = `<%= wallet && wallet.balance !== undefined ? wallet.balance.toFixed(2) : '0.00' %>`;
      navigator.clipboard.writeText(balance).then(() => {
        Swal.fire({
          toast: true,
          position: 'bottom-end',
          icon: 'success',
          title: 'Balance copied to clipboard.',
          showConfirmButton: false,
          timer: 1500
        });
      }).catch(() => {
        Swal.fire({
          toast: true,
          position: 'bottom-end',
          icon: 'error',
          title: 'Failed to copy balance.',
          showConfirmButton: false,
          timer: 1500
        });
      });
    }

    function showAddFundsModal() {
      Swal.fire({
        title: 'Add Funds',
        html: `<input type="number" id="amount" class="swal2-input" min="1" step="0.01" placeholder="Amount (₹)" required>`,
        showCancelButton: true,
        confirmButtonText: 'Add Funds',
        cancelButtonText: 'Cancel',
        focusConfirm: false,
        preConfirm: () => {
          const amount = document.getElementById('amount').value;
          if (!amount || amount <= 0) {
            Swal.showValidationMessage('Please enter a valid amount');
            return false;
          }
          return { amount: parseFloat(amount) };
        }
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            Swal.fire({
              title: 'Processing...',
              allowOutsideClick: false,
              didOpen: () => Swal.showLoading()
            });
            const response = await fetch('/user/wallet/add', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(result.value),
              credentials: 'include'
            });
            const data = await response.json();
            Swal.close();
            if (data.success) {
              Swal.fire({
                toast: true,
                position: 'bottom-end',
                icon: 'success',
                title: data.message,
                showConfirmButton: false,
                timer: 1500
              });
              setTimeout(() => window.location.reload(), 1500);
            } else {
              Swal.fire({
                toast: true,
                position: 'bottom-end',
                icon: 'error',
                title: data.message || 'Failed to add funds',
                showConfirmButton: false,
                timer: 1500
              });
            }
          } catch (error) {
            Swal.close();
            Swal.fire({
              toast: true,
              position: 'bottom-end',
              icon: 'error',
              title: 'An error occurred while adding funds.',
              showConfirmButton: false,
              timer: 1500
            });
          }
        }
      });
    }

    function showWithdrawFundsModal() {
      Swal.fire({
        title: 'Withdraw Funds',
        html: `<input type="number" id="withdrawAmount" class="swal2-input" min="1" step="0.01" placeholder="Amount (₹)" required>`,
        showCancelButton: true,
        confirmButtonText: 'Withdraw Funds',
        cancelButtonText: 'Cancel',
        focusConfirm: false,
        preConfirm: () => {
          const amount = document.getElementById('withdrawAmount').value;
          if (!amount || amount <= 0) {
            Swal.showValidationMessage('Please enter a valid amount');
            return false;
          }
          return { amount: parseFloat(amount) };
        }
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            Swal.fire({
              title: 'Processing...',
              allowOutsideClick: false,
              didOpen: () => Swal.showLoading()
            });
            const response = await fetch('/user/wallet/withdraw', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(result.value),
              credentials: 'include'
            });
            const data = await response.json();
            Swal.close();
            if (data.success) {
              Swal.fire({
                toast: true,
                position: 'bottom-end',
                icon: 'success',
                title: data.message,
                showConfirmButton: false,
                timer: 1500
              });
              setTimeout(() => window.location.reload(), 1500);
            } else {
              Swal.fire({
                toast: true,
                position: 'bottom-end',
                icon: 'error',
                title: data.message || 'Failed to withdraw funds',
                showConfirmButton: false,
                timer: 1500
              });
            }
          } catch (error) {
            Swal.close();
            Swal.fire({
              toast: true,
              position: 'bottom-end',
              icon: 'error',
              title: 'An error occurred while withdrawing funds.',
              showConfirmButton: false,
              timer: 1500
            });
          }
        }
      });
    }

    function downloadWalletHistory(format) {
      const transactions = Array.from(document.querySelectorAll('#transactionTable tbody tr')).map(row => {
        const cells = row.querySelectorAll('td');
        return {
          date: cells[0].textContent,
          type: cells[1].textContent,
          amount: cells[2].textContent,
          description: cells[3].textContent
        };
      });

      if (transactions.length === 0) {
        Swal.fire({
          toast: true,
          position: 'bottom-end',
          icon: 'info',
          title: 'No transactions to download.',
          showConfirmButton: false,
          timer: 1500
        });
        return;
      }

      if (format === 'csv') {
        const csvContent = [
          'Date,Type,Amount,Description',
          ...transactions.map(t => `"${t.date}","${t.type}","${t.amount}","${t.description}"`)
        ].join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', 'wallet_history.csv');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      } else if (format === 'pdf') {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        doc.setFontSize(16);
        doc.text('Wallet Transaction History', 20, 20);
        doc.setFontSize(12);
        doc.text(`Balance: ₹<%= wallet && wallet.balance !== undefined ? wallet.balance.toFixed(2) : '0.00' %>`, 20, 30);
        doc.autoTable({
          startY: 40,
          head: [['Date', 'Type', 'Amount', 'Description']],
          body: transactions.map(t => [t.date, t.type, t.amount, t.description]),
          styles: { fontSize: 10 },
          headStyles: { fillColor: [31, 41, 55] },
          alternateRowStyles: { fillColor: [249, 250, 251] }
        });
        doc.save('wallet_history.pdf');
      }
    }

    const searchInput = document.getElementById('searchInput');
    const filterType = document.getElementById('filterType');
    const sortBy = document.getElementById('sortBy');
    const transactionTable = document.getElementById('transactionTable');
    let transactionRows = Array.from(document.querySelectorAll('#transactionTable tbody tr'));

    function filterAndSortTransactions() {
      const searchTerm = searchInput.value.toLowerCase();
      const typeFilter = filterType.value;
      const sortOption = sortBy.value;

      let filteredRows = transactionRows.filter(row => {
        const description = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
        const amount = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
        const type = row.getAttribute('data-type');
        const matchesSearch = description.includes(searchTerm) || amount.includes(searchTerm);
        const matchesType = typeFilter === 'all' || type === typeFilter;
        return matchesSearch && matchesType;
      });

      filteredRows.sort((a, b) => {
        if (sortOption === 'date-desc') {
          return b.getAttribute('data-date') - a.getAttribute('data-date');
        } else if (sortOption === 'date-asc') {
          return a.getAttribute('data-date') - b.getAttribute('data-date');
        } else if (sortOption === 'amount-desc') {
          return b.getAttribute('data-amount') - a.getAttribute('data-amount');
        } else if (sortOption === 'amount-asc') {
          return a.getAttribute('data-amount') - b.getAttribute('data-amount');
        }
      });

      transactionTable.querySelector('tbody').innerHTML = '';
      filteredRows.forEach(row => transactionTable.querySelector('tbody').appendChild(row));
    }

    if (searchInput) searchInput.addEventListener('input', filterAndSortTransactions);
    if (filterType) filterType.addEventListener('change', filterAndSortTransactions);
    if (sortBy) sortBy.addEventListener('change', filterAndSortTransactions);

    transactionTable.querySelectorAll('th[data-sort]').forEach(th => {
      th.addEventListener('click', () => {
        const sortKey = th.getAttribute('data-sort');
        sortBy.value = sortBy.value === `${sortKey}-asc` ? `${sortKey}-desc` : `${sortKey}-asc`;
        filterAndSortTransactions();
      });
    });
  </script>
</body>
</html>